name: Build Book

on:
  push:
    branches:
      - main
    paths:
      - 'book/**/*.md'
      - 'tools/build.js'
      - '.github/workflows/build-book.yml'
      - 'package.json'
      - 'templates/**/*'
      - 'build.sh'
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: write  # Required for creating releases and tags

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install Node.js dependencies
        run: npm install
          
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pandoc texlive-xetex texlive-fonts-recommended texlive-fonts-extra librsvg2-bin
          
      - name: Set up version info
        id: version
        run: |
          VERSION=$(date +'v%Y.%m.%d-%H%M')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "DATE=$(date +'%B %d, %Y')" >> $GITHUB_ENV
          
      - name: Create build directory
        run: mkdir -p build
      
      - name: Ensure templates directory exists
        run: mkdir -p templates
      
      - name: Ensure images directory exists
        run: |
          # Ensure common images directory exists
          mkdir -p book/images
          
          # Ensure language-specific images directories exist
          mkdir -p book/en/images
          
          # Copy any SVG files from chapter directories to image directories
          find book -name "*.svg" -exec cp {} book/images/ \;
          
          # Verify common cover image exists
          if [ -f "book/images/cover.svg" ]; then
            echo "Cover image exists at book/images/cover.svg"
          elif [ -f "book/images/cover.png" ]; then
            echo "Cover image exists at book/images/cover.png"
          else
            echo "WARNING: Cover image not found in common directory"
            
            # Check for language-specific covers
            for lang in en; do
              if [ -f "book/$lang/images/cover.svg" ]; then
                echo "Language-specific cover image found at book/$lang/images/cover.svg"
              elif [ -f "book/$lang/images/cover.png" ]; then
                echo "Language-specific cover image found at book/$lang/images/cover.png"
              else
                echo "WARNING: Cover image not found in language directory"
                
                # Try to find cover image in art directory and copy to language-specific folder
                if [ -f "art/cover.svg" ]; then
                  echo "Found cover image at art/cover.svg, copying to language directories"
                  
                  # Copy to language-specific directories
                  mkdir -p book/$lang/images
                  cp art/cover.svg book/$lang/images/cover.svg
                  echo "Cover image copied to book/$lang/images/cover.svg"
                  
                  # Also copy to common directory if it doesn't exist
                  if [ ! -f "book/images/cover.svg" ]; then
                    cp art/cover.svg book/images/cover.svg
                    echo "Cover image also copied to book/images/cover.svg"
                  fi
                elif [ -f "art/cover.png" ]; then
                  echo "Found cover image at art/cover.png, copying to language directories"
                  
                  # Copy to language-specific directories
                  mkdir -p book/$lang/images
                  cp art/cover.png book/$lang/images/cover.png
                  echo "Cover image copied to book/$lang/images/cover.png"
                  
                  # Also copy to common directory if it doesn't exist
                  if [ ! -f "book/images/cover.png" ]; then
                    cp art/cover.png book/images/cover.png
                    echo "Cover image also copied to book/images/cover.png"
                  fi
                else
                  echo "WARNING: Could not find cover image in art directory"
                  
                  # Create a placeholder cover image for testing
                  mkdir -p art
                  echo '<?xml version="1.0" encoding="UTF-8" standalone="no"?>
                  <svg width="800" height="1200" xmlns="http://www.w3.org/2000/svg">
                    <rect width="800" height="1200" fill="#f0f0f0"/>
                    <text x="400" y="400" font-family="Arial" font-size="60" text-anchor="middle" fill="#333">Actual Intelligence</text>
                    <text x="400" y="500" font-family="Arial" font-size="40" text-anchor="middle" fill="#666">A Practical Guide to Using AI in Everyday Life</text>
                    <text x="400" y="600" font-family="Arial" font-size="30" text-anchor="middle" fill="#999">Placeholder Cover</text>
                  </svg>' > art/cover.svg
                  echo "Created placeholder cover image at art/cover.svg"
                  
                  # Copy to language-specific directory
                  mkdir -p book/$lang/images
                  cp art/cover.svg book/$lang/images/cover.svg
                  echo "Placeholder cover image copied to book/$lang/images/cover.svg"
                  
                  # Also copy to common directory
                  cp art/cover.svg book/images/cover.svg
                  echo "Placeholder cover image also copied to book/images/cover.svg"
                fi
              fi
            done
          fi
        
      - name: Use enhanced build script
        run: |
          echo "Running enhanced build script..."
          chmod +x build.sh
          ./build.sh
        env:
          VERSION: ${{ env.VERSION }}
          DATE: ${{ env.DATE }}
      
      - name: Check build outputs
        run: |
          echo "Checking build outputs..."
          
          # Check PDF
          if [ -f "build/actual-intelligence.pdf" ] && [ -s "build/actual-intelligence.pdf" ]; then
            echo "✅ PDF file exists and has content"
            du -h build/actual-intelligence.pdf
          else
            echo "❌ PDF file is missing or empty!"
          fi
          
          # Check EPUB
          if [ -f "build/actual-intelligence.epub" ] && [ -s "build/actual-intelligence.epub" ]; then
            echo "✅ EPUB file exists and has content"
            du -h build/actual-intelligence.epub
          else
            echo "❌ EPUB file is missing or empty!"
          fi
          
          # Check HTML/index
          if [ -f "build/index.html" ] && [ -s "build/index.html" ]; then
            echo "✅ HTML index file exists and has content"
            du -h build/index.html
          else
            echo "❌ HTML index file is missing or empty!"
          fi

      - name: List generated files
        run: |
          echo "Generated files:"
          ls -la build/
          echo ""
          echo "File sizes to ensure they're not empty:"
          du -h build/* 2>/dev/null || echo "Some files not found"

      - name: Upload artifacts for debugging if needed
        uses: actions/upload-artifact@v4
        with:
          name: build-outputs
          path: build/
          retention-days: 7

      - name: Create Release Markdown Body
        id: create_release_body
        run: |
          echo "# Actual Intelligence Book - ${{ env.VERSION }}" > release_body.md
          echo "" >> release_body.md
          echo "Automatically generated build of the Actual Intelligence book." >> release_body.md
          echo "" >> release_body.md
          echo "## Available Formats" >> release_body.md
          echo "" >> release_body.md
          
          # Create table of formats
          echo "| Format | Link |" >> release_body.md
          echo "|--------|------|" >> release_body.md
          echo "| PDF | [Download PDF](https://github.com/iksnae/actual-intelligence/releases/download/${{ env.VERSION }}/actual-intelligence.pdf) |" >> release_body.md
          
          # Check for EPUB and add if it exists
          if [ -f "build/actual-intelligence.epub" ] && [ -s "build/actual-intelligence.epub" ]; then
            echo "| EPUB | [Download EPUB](https://github.com/iksnae/actual-intelligence/releases/download/${{ env.VERSION }}/actual-intelligence.epub) |" >> release_body.md
          else
            echo "| EPUB | Not available in this build |" >> release_body.md
          fi
          
          # Add markdown and online reading links
          echo "| Markdown | [View Raw Content](https://github.com/iksnae/actual-intelligence/releases/download/${{ env.VERSION }}/actual-intelligence.md) |" >> release_body.md
          echo "| Online Reading | [Read Online](https://iksnae.github.io/actual-intelligence/) |" >> release_body.md
          
          echo "" >> release_body.md
          echo "## Changes in this version" >> release_body.md
          echo "" >> release_body.md
          echo "This version includes all changes pushed to the repository as of ${{ env.DATE }}." >> release_body.md
          
          # Set release body as output
          RELEASE_BODY=$(cat release_body.md)
          # Convert newlines to literal \\n for GitHub Actions
          RELEASE_BODY="${RELEASE_BODY//'%'/'%25'}"
          RELEASE_BODY="${RELEASE_BODY//$'\n'/'%0A'}"
          RELEASE_BODY="${RELEASE_BODY//$'\r'/'%0D'}"
          echo "body=$RELEASE_BODY" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ env.VERSION }}
          tag_name: ${{ env.VERSION }}
          draft: false
          prerelease: false
          files: build/*.*
          body_path: release_body.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/main'  # Only deploy on pushes to the main branch
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages  # The branch to push to
          folder: build  # The folder containing the HTML files
          target-folder: .  # Deploy to the root of the branch
          clean: true  # Clean the target branch before deploying
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}