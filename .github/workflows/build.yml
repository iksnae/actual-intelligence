name: Build Book

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    container: iksnae/book-builder:latest

    steps:
    - uses: actions/checkout@v4

    # Install book-tools
    - name: Install book-tools
      run: |
        # Create required directories
        mkdir -p ~/.local/bin

        # Clone book-tools for scripts
        git clone https://github.com/iksnae/book-tools.git ~/.book-tools
        
        # Make scripts executable and copy to project
        mkdir -p tools/scripts
        cp -r ~/.book-tools/src/scripts/* tools/scripts/
        chmod +x tools/scripts/*.sh

    # Debug the directory structure
    - name: Debug directory structure
      run: |
        echo "=== Chapter Structure ==="
        find book -type d -name "chapter-*" | sort
        echo "=== Markdown Files ==="
        find book -name "*.md" | sort | head -10
        
    # Patch the combine-markdown.sh script to fix the issue
    - name: Patch combine-markdown script
      run: |
        # Add better debugging and error handling
        cat << 'EOF' > tools/scripts/combine-markdown.sh.new
#!/bin/bash

# combine-markdown.sh - Combines markdown files for a specific language
# Usage: combine-markdown.sh [language] [output_path] [book_title] [book_subtitle]

set -e  # Exit on error

# Get arguments
LANGUAGE=${1:-en}
OUTPUT_PATH=${2:-build/actual-intelligence.md}
BOOK_TITLE=${3:-"Actual Intelligence"}
BOOK_SUBTITLE=${4:-"A Practical Guide to Using AI in Everyday Life"}

echo "üìù Combining markdown files for $LANGUAGE..."

# Make sure the parent directory exists
mkdir -p "$(dirname "$OUTPUT_PATH")"

# Clear the file if it exists
true > "$OUTPUT_PATH"

# Add metadata header
cat > "$OUTPUT_PATH" << EOH
---
title: "$BOOK_TITLE"
subtitle: "$BOOK_SUBTITLE"
author: "Open Source Community"
publisher: "Khaos Studios"
language: "$LANGUAGE"
toc: true
EOH

# Add cover image metadata if a cover image exists
if [ -n "$COVER_IMAGE" ]; then
  echo "cover-image: '$COVER_IMAGE'" >> "$OUTPUT_PATH"
fi

# Close the metadata block
cat >> "$OUTPUT_PATH" << EOH
---

EOH

# Debug the chapter structure
echo "Looking for chapter directories in book/$LANGUAGE:"
find "book/$LANGUAGE" -type d -name "chapter-*" | sort -V

# Find all chapter directories for the specified language and sort them numerically
CHAPTERS=$(find "book/$LANGUAGE" -type d -name "chapter-*" | sort -V)

if [ -z "$CHAPTERS" ]; then
  echo "‚ö†Ô∏è Warning: No chapter directories found in book/$LANGUAGE"
  # List what we do have
  echo "Content of book/$LANGUAGE:"
  ls -la "book/$LANGUAGE/"
  echo "Searching for any markdown files:"
  find "book/$LANGUAGE" -name "*.md" | sort
fi

echo "$CHAPTERS" | while read -r chapter_dir; do
  echo "Processing chapter directory: $chapter_dir"
  
  # Look for title-page.md first if it exists (only for first chapter)
  if [ "$(basename "$chapter_dir")" = "chapter-01" ]; then
    title_page="book/$LANGUAGE/title-page.md"
    if [ -f "$title_page" ]; then
      echo "Adding title page from $title_page"
      cat "$title_page" >> "$OUTPUT_PATH"
      # No additional page break needed
    fi
  fi
  
  # Look for chapter introduction file
  if [ -f "$chapter_dir/00-introduction.md" ]; then
    echo "Adding chapter introduction from $chapter_dir/00-introduction.md"
    cat "$chapter_dir/00-introduction.md" >> "$OUTPUT_PATH"
    # No additional page break needed
  fi
  
  # Process all section files in correct numeric order
  # Find all numeric prefixed markdown files (excluding introduction) and sort them properly
  SECTION_FILES=$(find "$chapter_dir" -maxdepth 1 -type f -name "[0-9]*.md" | grep -v "00-introduction.md" | sort -V)
  
  if [ -z "$SECTION_FILES" ]; then
    echo "‚ö†Ô∏è Warning: No section files found in $chapter_dir"
    # List what we do have
    echo "Content of $chapter_dir:"
    ls -la "$chapter_dir"
  fi
  
  echo "$SECTION_FILES" | while read -r section_file; do
    echo "Adding section from $section_file"
    # Add an explicit section header comment for better visibility in source
    echo -e "\n\n<!-- Start of section: $(basename "$section_file") -->\n" >> "$OUTPUT_PATH"
    cat "$section_file" >> "$OUTPUT_PATH"
    # No additional page break needed
  done
done

# Process appendices if they exist, ensuring numeric sorting
appendices_dir="book/$LANGUAGE/appendices"
if [ -d "$appendices_dir" ]; then
  echo "Processing appendices from $appendices_dir"
  
  echo -e "\n\n# Appendices\n\n" >> "$OUTPUT_PATH"
  
  find "$appendices_dir" -type f -name "*.md" | sort -V | while read -r appendix_file; do
    echo "Adding appendix: $appendix_file"
    cat "$appendix_file" >> "$OUTPUT_PATH"
    # Only add page break if file doesn't already have one
    if ! grep -q '<div style="page-break-after: always;"></div>' "$appendix_file"; then
      echo -e "\n\n---\n\n<div style=\"page-break-after: always;\"></div>\n\n" >> "$OUTPUT_PATH"
    fi
  done
fi

# Process glossary if it exists
glossary_file="book/$LANGUAGE/glossary.md"
if [ -f "$glossary_file" ]; then
  echo "Adding glossary from $glossary_file"
  echo -e "\n\n# Glossary\n\n" >> "$OUTPUT_PATH"
  cat "$glossary_file" >> "$OUTPUT_PATH"
  # Only add page break if file doesn't already have one
  if ! grep -q '<div style="page-break-after: always;"></div>' "$glossary_file"; then
    echo -e "\n\n---\n\n<div style=\"page-break-after: always;\"></div>\n\n" >> "$OUTPUT_PATH"
  fi
fi

# Check if we actually added content
if [ $(wc -l < "$OUTPUT_PATH") -lt 10 ]; then
  echo "‚ö†Ô∏è Warning: The combined markdown file appears to be empty or very small"
  echo "Content of $OUTPUT_PATH:"
  cat "$OUTPUT_PATH"
else
  echo "‚úÖ Markdown files combined into $OUTPUT_PATH"
fi
EOF
        mv tools/scripts/combine-markdown.sh.new tools/scripts/combine-markdown.sh
        chmod +x tools/scripts/combine-markdown.sh
        
    # Build the book
    - name: Build Book
      run: |
        # Run with verbose mode
        ./tools/scripts/build.sh --all-languages --verbose

    # Upload build artifacts
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: book-builds
        path: build/
        if-no-files-found: warn